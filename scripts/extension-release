# -*- mode: Shell-script-*-
#!/usr/bin/bash

# extension-release
# Author: Mario Fernandez
#
# Prepares an extension for Google Chrome for release, merging the
# latest changes, minifying the libraries and producing an exported
# zip file. There are multiple checks to make sure that no errors
# arise.
#
# Usage: extension-release extension_name
#
# Requirements
#
# The shell configuration at http://svn.hceris.com/shell must be
# installed. The WORKSPACE env variable should be set. Git should be
# installed. The minifyjs script should be available in the PATH.
#
# Expected Layout
#
# The extension folder should be under ${WORKSPACE}/extensions. The
# name of the folder should be extension_name.git. The manifest.json
# file should already have a valid version number (one without a tag
# attached to it).
#
# The branch used to produce an output is the master branch. The
# output is produced at the releases branch, which contains the
# minified libraries and updated references to them. Both branches
# should already exist.
#
# The javascript files should be in the js folder.

# Check folders

echo 'Checking folders...'

if [ -z $1 ]; then
    echo 'usage: extension-release extension'
    exit 1
fi

extension=$1

if [ -z ${WORKSPACE:+1} ]; then
    echo 'ERROR: env variable WORKSPACE is not set'
    exit 1
fi

directory=${WORKSPACE}/extensions/$extension

if [ ! -d $directory ]; then
    echo 'ERROR: the given extension does not exist'
    exit 1
fi

js=${directory}/js

if [ ! -d $js ]; then
    echo 'ERROR: the folder with the JavaScript files does not exist'
    exit 1
fi

if ! type git > /dev/null || ! type minifyjs > /dev/null ; then
    echo 'ERROR: Not all required commands can be found'
    exit 1
fi

# Switch to releases branch, and merges changes from master

cd $directory

echo 'Checking pending changes...'

if [ ! -f .git/refs/heads/master ]; then
    echo "ERROR: Master branch does not exist"
    exit 1
fi

git checkout -q master
# status=`git status --porcelain | awk 'END { print NR;}'`
status=`git status | awk '/^nothing to commit/'`
if [ -z "$status" ]; then
# if [ $status != 0 ]; then
    echo "ERROR: There are pending changes"
    exit 1
fi

echo 'Merging changes...'

if [ ! -f .git/refs/heads/releases ]; then
    echo "ERROR: Releases branch does not exist"
    exit 1
fi

git checkout -q releases
conflicts=`git merge master | awk 'BEGIN { conflicts = 0; } /^CONFLICT/ { conflicts++; } END { print conflicts; }'`

if [ $conflicts != 0 ]; then
    echo "ERROR: There were ${conflicts} conflicts while merging. Fix them before continuing"
    exit 1
fi

# Get version number

echo 'Get version for the release...'
version=`awk -F ':' '$0 ~ /version/ { gsub(/[", ]/, "", $2); print $2 }' manifest.json`

if [ -f .git/refs/tags/v$version ]; then
    echo "Version ${version} already exists as a tag, update the manifest to a new tag before proceeding"
    exit 1
fi

# Minify JavaScript files, commit them if necessary

cd $js
echo 'Minifying JavaScript files...'
if ! minifyjs; then
    echo "ERROR: minifyjs did not complete successfully"
    exit 1
fi

function check_new_files () {
    if [ ! -f ../.gitattributes ] ; then
        echo "ERROR: .gitattributes does not exist"
        exit 1
    fi
    for file in ./*.js ; do
        if [ -f $file ] && [[ $file != *.min.js ]]; # Avoid already minified files
        then
            fileName=$(basename $file)
            if [ -z "$(grep $fileName ../.gitattributes)" ] ; then
                echo "ERROR: File ${fileName} has been newly added, and should be added to the ignore list. References to it should be updated to the minified version too"
                exit 1
            fi
        fi
    done
}

# status=`git status --porcelain | awk 'END { print NR;}'`
status=`git status | awk '/^nothing to commit/'`
if [ -z "$status" ]; then
# if [ $status != 0 ]; then
    echo "Commiting minified files"
    check_new_files
    git ls-files --other --exclude-standard | xargs git add
    git commit -a -q -m "Minified files for release ${version}"
fi

# Export file

cd $directory
echo 'Tagging the release...'
git archive --format=zip --output $extension.zip releases

# Tag version
read -p "Enter the message for the tag for this release: "

if [ -z "$REPLY" ]; then
    echo 'ERROR: empty message for a tag not allowed'
    exit 1
fi

git tag -a v$version -m "$REPLY"
git checkout master
